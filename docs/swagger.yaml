definitions:
  dto.AuthorItem:
    properties:
      nickname:
        type: string
      sum_like_num:
        type: integer
      url:
        type: string
    type: object
  dto.PersonDetail:
    properties:
      age:
        type: integer
      birth:
        type: string
      email:
        type: string
      gender:
        type: string
    type: object
  dto.QuestionItem:
    properties:
      content:
        type: string
      id:
        type: integer
    type: object
  dto.RankComment:
    properties:
      CID:
        type: integer
      GID:
        type: integer
      UID:
        type: integer
      comment:
        type: string
      create_time:
        type: string
      like_num:
        type: integer
    type: object
  dto.RankItem:
    properties:
      GID:
        type: integer
      authorName:
        type: string
      commentNum:
        type: integer
      downloadNum:
        type: integer
      game_name:
        type: string
      img:
        type: string
      like_num:
        type: integer
    type: object
  dto.RankItemByZone:
    properties:
      GID:
        type: integer
      authorName:
        type: string
      clickCount:
        type: integer
      commentNum:
        type: integer
      downloadNum:
        type: integer
      game_name:
        type: string
      img:
        type: string
      like_num:
        type: integer
    type: object
  models.Person:
    properties:
      email:
        type: string
      id:
        type: integer
      nickname:
        type: string
      password:
        type: string
    type: object
host: localhost:8084
info:
  contact: {}
  description: FLIP backend server.
  termsOfService: http://swagger.io/terms/
  title: FLIP backend API
  version: "1.0"
paths:
  /v1/change/comment/add:
    post:
      consumes:
      - text/plain
      description: add a comment
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: gameid
        in: body
        name: game_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "message":the comment has bee added}'
          schema:
            type: string
      summary: add a comment
  /v1/change/commentcomment/up:
    post:
      consumes:
      - text/plain
      description: update a comment
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: comment_id
        in: body
        name: comment_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "message":"the comment has been up"}'
          schema:
            type: string
      summary: update a comment
  /v1/collect/check:
    get:
      consumes:
      - text/plain
      description: check whether the user has collected the game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      - description: UID
        in: header
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "msg":true}'
          schema:
            type: string
      summary: check whether the user has collected the game
  /v1/collect/click:
    get:
      consumes:
      - text/plain
      description: allow user to collect a game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      - description: UID
        in: header
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "msg":"successfully collect/uncollect"}'
          schema:
            type: string
      summary: allow user to collect a game
  /v1/collect/num:
    get:
      consumes:
      - text/plain
      description: get the collect number of a game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "count":count}'
          schema:
            type: int
      summary: get the collect number of a game
  /v1/download/game:
    get:
      consumes:
      - text/plain
      description: get a game, return a zip
      parameters:
      - description: the game's id
        in: header
        name: game_id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: ""
      summary: get a game
  /v1/download/img:
    get:
      consumes:
      - text/plain
      description: get a game's image
      parameters:
      - description: the image name
        in: header
        name: img_name
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: ""
      summary: get a game's image
  /v1/download/personal:
    get:
      consumes:
      - text/plain
      description: get a person's image
      parameters:
      - description: token
        in: header
        name: token
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: ""
      summary: get a person's image
  /v1/info/getuserinfo:
    get:
      consumes:
      - text/plain
      description: get a user's information including its email, nickname according
        to uid
      parameters:
      - description: id
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "userinfo": userInfo}'
          schema:
            $ref: '#/definitions/models.Person'
      summary: get a user's information
  /v1/like/check:
    get:
      consumes:
      - text/plain
      description: check whether the user has liked the game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      - description: UID
        in: header
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "msg":true}'
          schema:
            type: string
      summary: check whether the user has liked the game
  /v1/like/click:
    get:
      consumes:
      - text/plain
      description: allow user to like a game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      - description: UID
        in: header
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "msg":"successfully like/unlike"}'
          schema:
            type: string
      summary: allow user to like a game
  /v1/like/num:
    get:
      consumes:
      - text/plain
      description: get the like number of a game
      parameters:
      - description: GID
        in: header
        name: gid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":http.StatusOK, "count":count}'
          schema:
            type: int
      summary: get the like number of a game
  /v1/notoken/change/answer:
    post:
      consumes:
      - text/plain
      description: vertify the answer to security question
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: question
        in: body
        name: question
        required: true
        schema:
          type: integer
      - description: answer
        in: body
        name: answer
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "message":answer is correct}'
          schema:
            type: string
      summary: vertify the answer to security question
  /v1/notoken/change/password:
    post:
      consumes:
      - text/plain
      description: change a user's password
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: newpwd
        in: body
        name: newpwd
        required: true
        schema:
          type: string
      - description: confirm
        in: body
        name: confirm
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "message":update successfully}'
          schema:
            type: string
      summary: change a user's password
  /v1/notoken/change/vertify:
    post:
      consumes:
      - text/plain
      description: vertify a user's password
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "message":email is vertified}'
          schema:
            type: string
      summary: vertify a user's email
  /v1/notoken/login:
    post:
      consumes:
      - text/plain
      description: using password, email and nickname to create a new account
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "msg":"register successfully":, token":"string"}'
          schema:
            type: string
      summary: log in a account
  /v1/notoken/register:
    post:
      consumes:
      - text/plain
      description: using password, email and nickname to create a new account
      parameters:
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: nickname
        in: body
        name: nickname
        required: true
        schema:
          type: string
      - description: question1
        in: body
        name: question1
        required: true
        schema:
          type: integer
      - description: answer1
        in: body
        name: answer1
        required: true
        schema:
          type: string
      - description: question2
        in: body
        name: question2
        required: true
        schema:
          type: integer
      - description: answer2
        in: body
        name: answer2
        required: true
        schema:
          type: string
      - description: question3
        in: body
        name: question3
        required: true
        schema:
          type: integer
      - description: answer3
        in: body
        name: answer3
        required: true
        schema:
          type: string
      - description: person image
        in: body
        name: file_body
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "msg":"register successfully":, token":"string"}'
          schema:
            type: string
        "400":
          description: cannot save answer
          schema:
            type: string
        "401":
          description: can not generate token
          schema:
            type: string
        "406":
          description: email, nickname or password is missing
          schema:
            type: string
      summary: register a new account
  /v1/rank/author:
    get:
      consumes:
      - text/plain
      description: get anuthor rank by zone
      parameters:
      - description: num
        in: header
        name: num
        required: true
        type: integer
      - description: zone
        in: header
        name: zone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":ranklist}'
          schema:
            items:
              $ref: '#/definitions/dto.AuthorItem'
            type: array
      summary: get anuthor rank by zone
  /v1/rank/comment/time:
    get:
      consumes:
      - text/plain
      description: search a game by keyword
      parameters:
      - description: the number of the return item
        in: header
        name: num
        required: true
        type: integer
      - description: GID
        in: header
        name: GID
        required: true
        type: string
      - description: the offset
        in: header
        name: offset
        required: true
        type: integer
      - description: the order method
        in: header
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "List":ranklist}'
          schema:
            items:
              $ref: '#/definitions/dto.RankComment'
            type: array
      summary: search a game by keyword
  /v1/rank/download:
    get:
      consumes:
      - text/plain
      description: get game rank by zone odered by downloading
      parameters:
      - description: num
        in: header
        name: num
        required: true
        type: integer
      - description: zone
        in: header
        name: zone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":ranklist}'
          schema:
            items:
              $ref: '#/definitions/dto.RankItemByZone'
            type: array
      summary: get game rank by zone
  /v1/rank/zone:
    get:
      consumes:
      - text/plain
      description: get game rank by zone ordered by like, download or comment with
        default like
      parameters:
      - description: num
        in: header
        name: num
        required: true
        type: integer
      - description: zone
        in: header
        name: zone
        required: true
        type: string
      - description: like, download or comment with default like
        in: header
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":ranklist}'
          schema:
            items:
              $ref: '#/definitions/dto.RankItemByZone'
            type: array
      summary: get game rank by zone
  /v1/search/game:
    get:
      consumes:
      - text/plain
      description: search game ordered by like, download or comment with default like
      parameters:
      - description: num
        in: header
        name: num
        required: true
        type: integer
      - description: keyword
        in: header
        name: keyword
        required: true
        type: string
      - description: like, download or comment with default like
        in: header
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":ranklist}'
          schema:
            items:
              $ref: '#/definitions/dto.RankItemByZone'
            type: array
      summary: search game
  /v1/security/question:
    get:
      consumes:
      - text/plain
      description: get security question list
      parameters:
      - description: num
        in: header
        name: num
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":questionlist}'
          schema:
            items:
              $ref: '#/definitions/dto.QuestionItem'
            type: array
      summary: get security question list with an input number
  /v1/security/user/question:
    get:
      consumes:
      - text/plain
      description: get a user's security question list
      parameters:
      - description: email
        in: header
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "list":questionlist}'
          schema:
            items:
              $ref: '#/definitions/dto.QuestionItem'
            type: array
      summary: get a user's security question list
  /v1/user/change/detail:
    post:
      consumes:
      - text/plain
      description: get a user's detail
      parameters:
      - description: token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "detail":detail}'
          schema:
            $ref: '#/definitions/dto.PersonDetail'
      summary: get a user's detail
  /v1/user/detail:
    post:
      consumes:
      - text/plain
      description: change a user's detail
      parameters:
      - description: token
        in: header
        name: token
        required: true
        type: string
      - description: the attribute to be modified
        in: body
        name: FieldKey
        required: true
        schema:
          type: string
      - description: the attribute value to be modified
        in: body
        name: FieldVal
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "msg": "set successfully"}'
          schema:
            type: json
      summary: change a user's detail
  /v1/verification/code:
    get:
      consumes:
      - text/plain
      description: get a random security code
      parameters:
      - description: getCode
        in: header
        name: getCode
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status":200, "content":code.Content,"url":code,URL}'
          schema:
            type: string
      summary: get security code
securityDefinitions:
  JWT:
    type: basic
swagger: "2.0"
